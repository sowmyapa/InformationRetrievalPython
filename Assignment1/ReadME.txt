================================================================================================================================
                                                  How to Execute
================================================================================================================================

1) Go inside the directory in terminal:
   ex : cd /Users/sowmyaparameshwara/Desktop/Assignments/IR_Assignments/Assignment1
2) Type the following command :
   python index.py
3) You will be prompted to enter the directory path which contains all the files on which index will be built :
   Ex : Enter directory path containing all documents
        /Users/sowmyaparameshwara/Desktop/Assignments/IR_Assignments/Assignment1/collection
4) You will be prompted to enter the file path which containes queries. (File has each query in a different line) :
   Ex : Enter path of the file containing the queries
        /Users/sowmyaparameshwara/Desktop/Assignments/IR_Assignments/Assignment1/queries.txt
5) It outputs the query result and asks if you wish to print dictionary (Enter 'y' if you wish to print else 'n'):
   Ex : Do you want to print dictionary (y/n)
        y
6) It outputs dictionary and asks if you wish to print docID to fileName mapping (Enter 'y' if you wish to print else 'n'):
   Ex : Do you want to print doc id to file name list (y/n)
        y
7) It outputs the docID to filename mapping.


================================================================================================================================
                                                      Refer
================================================================================================================================

 1) Sample queries :
   /Users/sowmyaparameshwara/Desktop/Assignments/IR_Assignments/Assignment1/queries.txt
 2) Output generated by my code :
   /Users/sowmyaparameshwara/Desktop/Assignments/IR_Assignments/Assignment1/output.txt

================================================================================================================================
                                                      Logic
================================================================================================================================

1) buildIndex :
 This function loops through all files in the given directory.
           For each file it reads content one line at a time, strips new line characters at beginning and end of each line.
           tokenizes the line using "\W+" and converts each token into lowercase.
           docIDToFnameMap is a map whose value is again a map. This inner map has docID as the key, and list of posIDs in doc as value.
           Now there can be three cases :
           Case 1 : token is a new term in the dictionary : the token is inserted as a fresh entry in map.
           Case 2 : token and docID present in dictionary, new position as to be inserted : We fetch the innerMap using term as key,
                    from this inner map take the position list value using docID as key, now append this new position to the list.
           Case 3 : token is present in dictionary and a new docID as to be inserted into inner map : We fetch the innerMap using term as key,
                    To this inner map add a new entry with docID as key and list of new position as value.

  Sample Format docIDToFnameMap :
       docIDToFnameMap = { term1 : { docID1 : [pos1,pos2]},
                           term2 : { docID2 : [pos1,pos2],
                                     docID3 : [pos5,pos10]}
                          }
  Few snippets from actual data :
       docIDToFnameMap = {skins : {31 : [57]},
                                  {63 : [840]},
                                  {255 :[177, 306]},
                                  {344 :[28]},
                          destinies : {373 :[537]},
                          philadelphia : {31 : [238]},
                                         {147: [261]},
                                         {287:[257]}
                         }
 2) and_query :
    function for identifying relevant docs using the index
    This function 1) tokenizes the query terms into a list.
           2) Fetched the list of all docIDs which contain the query terms
           3) sorts the query term in order of the size of the document list containing the term
           4) It then loops through each of the query term in the sorted order.ie., query term with smallest document list is picked first.
           5) Before looping, two query terms documentList are merged and is set to result.
           6) In loop, every iteration the result is merged with the next query term and this result is assigned back to list
           7) At end of this iteration result has the list of all documents in which all query terms are present


    For each of the terms, we need to get its postings, then AND them together. Process terms in
    order of increasing document frequency : if we start by intersecting the two smallest postings lists,
    then all intermediate results must be no bigger than the smallest postings list, and we are therefore likely
    to do the least amount of total work.

================================================================================================================================
